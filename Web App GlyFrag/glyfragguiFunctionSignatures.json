// Function Signatures
// To optionally specify argument types and/or sizes, search for "type"
// and insert the appropriate specifiers inside the brackets. For example:
//
//    "type": ["double", "size=1,1"]
//
// To modify function or parameter help text, search for "purpose" and edit
// the values.
//
// JSON-formatted text below this line.
{
    "FragmentGlyGUI": {
        "inputs": [
            {
                "name": "varargin",
                "type": [],
                "purpose": ""
            }
        ],
        "outputs": [
            {
                "name": "AllIons",
                "type": [],
                "purpose": ""
            }
        ],
        "purpose": "  MULTISGPFRAG: Calculate all fragment ions formed theoretically from a\n  glycan\n \n  Syntax:\n  Prod=FragmentGly(SmallGlyPep,form,adduct,ngFrag,z)\n \n  Example:\n  SmallGlyPep='B{n{h{s}}}';\n  form='Me';\n  ngFrag=1;\n  z=1;\n  adduct='Na';\n \n  Input:\n    SmallGlyPep; glycan in SmallGlyPep format\n    ngFrag: # of glycan fragmentations\n    z: charge state.\n    Note:\n    This program will take a 'glycan' alone as input. glyBion and glyBion are\n    returned.\n \n  Output:\n    AllFragIons: Structure containing all fragment ion data, i.e. product structure,\n    fragmentation type, ion type and m/z at charge state z etc. Note even\n    internal ions are generated in the case of multiple peptide fragmentation.\n \n   Example:\n  adduct(1).name='Na';\n  adduct(1).count=2;\n  glyStruct(1).name='{n{n{h{h{h{h}}}{h{h{h}}{h}}}}}';\n  glyStruct(1).z=2;\n  glyStruct(1).adduct=adduct;\n  glyStruct(1).ano='Me';\n  glyStruct(1).form='Me';\n  glyStruct(1).mz=glyMZCalc(glyStruct);\n  ngFrag=2;\n  Prod=FragmentGly(glyStruct,ngFrag);\n \n  * Children function: glyMZCalc,findGlyFrag\n   joinGlyPep, glypepMW, glycanFrag, CompileFrags\n"
    },
    "_schemaVersion": "1.1.0",
    "breakGlyPep": {
        "inputs": [
            {
                "name": "SmallGlyPep",
                "type": [],
                "purpose": ""
            }
        ],
        "outputs": [
            {
                "name": "pepMat",
                "type": [],
                "purpose": ""
            },
            {
                "name": "glyMat",
                "type": [],
                "purpose": ""
            },
            {
                "name": "modMat",
                "type": [],
                "purpose": ""
            }
        ],
        "purpose": " BREAKGLYPEP: Parse glycopeptide (SmallGlyPep) to return component peptide \n  (pepMat), glycan (in glyMat) and other PTMs (in modMat) in structure format\n  \n  Syntax:\n      [pepMat,glyMat,modMat]=breakGlyPep(SmallGlyPep)\n   \n  Input: SmallGlyPep (Can be glycopeptide, peptide or glycan)\n  \n  Output: Structures pepMat (peptide), glyMat (glycan) and modMat (PTMs) \n    -- pepMat stores position (.pos) data and the peptide sequence (.pep)\n    -- glyMat stores position (.pos) on base peptide, glycan structure (.struct), \n       and glycan length (.len)\n    -- modMat stores PTM modification (.struct) and position (.pos) on base peptide\n  \n  Examples:\n  Example 1: for glycopeptide\n  >> SmallGlyPep='GYLN{n{n{h{h{h{h}}}{h{h{h}}{h{h}}}}}}CT{n{h{s}}{n{h{s}{f}}}}R';\n     [pepMat,glyMat,modMat]=breakGlyPep(SmallGlyPep)\n  Answer:\n        pepMat =    pep: 'GYLNCTR'\n                    pos: [1 2 3 4 38 39 61]\n        glyMat =    1x2 struct array with fields:\n                        pos\n                        struct\n                        len\n        modMat =   []\n     >> glyMat(1).pos\n        ans =   4\n     >> glyMat(1).struct\n        ans =   {n{n{h{h{h{h}}}{h{h{h}}{h{h}}}}}}\n     >> glyMat(1).len\n        ans =   11\n \n  Example 2: for glycopeptide (with glycan and another modification on the\n  same amino acid)\n  >> SmallGlyPep='GYLN{n{n{h{h{h{h}}}{h{h{h}}{h{h}}}}}}CT<s>{n{h{s}}{n{h{s}{f}}}}R';\n     [pepMat,glyMat,modMat]=breakGlyPep(SmallGlyPep)\n  Answer:\n        pepMat =    pep: 'GYLNCTR'\n                    pos: [1 2 3 4 38 39 64]\n        glyMat =    1x2 struct array with fields:\n                        pos\n                        struct\n                        len\n        modMat =    pos: 6\n                    struct: '<s>'\n     >> glyMat(2).pos\n        ans =   6\n     >> glyMat(2).struct\n        ans =   {n{h{s}}{n{h{s}{f}}}}\n     >> glyMat(2).len\n        ans =   7\n \n  Example 3: glycan only\n  >> SmallGlyPep='{n{h{s}}{n{h{s}{f}}}}';\n     [pepMat,glyMat,modMat]=breakGlyPep(SmallGlyPep)\n  Answer:\n        pepMat =    pep: ''\n                    pos: 0\n        glyMat =    pos: 0\n                    struct: '{n{h{s}}{n{h{s}{f}}}}'\n                    len: 7\n        modMat =    []\n \n  Example 4: peptide only\n  >> SmallGlyPep='GYM<o>KNCT<s>';\n     [pepMat,glyMat,modMat]=breakGlyPep(SmallGlyPep)\n  Answer:\n        pepMat =    pep: 'GYMKNCT'\n                    pos: [1 2 3 7 8 9 10]\n        glyMat =    []\n        modMat =    1x2 struct array with fields:\n                        pos\n                        struct\n     >> modMat(1).pos\n        ans =   3\n     >> modMat(1).struct\n        ans =   <o>\n \n  Example 5: for complete glycopeptide (for custom glycan and non-glycan fragmentation)\n  >> SmallGlyPep='GYLN{n{n{h{h{h{162.1}}}{h{h{h}}{h{h}}}}}}CT<+96>{n{h{s}}{n{h{s}{f}}}}R';\n     [pepMat,glyMat,modMat]=breakGlyPep(SmallGlyPep)\n  Answer:\n        pepMat =    pep: 'GYLNCTR'\n                    pos: [1 2 3 4 42 43 70]\n        glyMat =    1x2 struct array with fields:\n                        pos\n                        struct\n                        len\n        modMat =    pos: 6\n                    struct: '<+96>'\n     >> glyMat(1).pos\n        ans =   4\n     >> glyMat(1).struct\n        ans =   {n{n{h{h{h{162.1}}}{h{h{h}}{h{h}}}}}}\n     >> glyMat(1).len\n        ans =   11\n  \n See also joinGlyPep, compileFrags, glycanFrag, multiSGPFrag, UQFragIon.\n"
    },
    "findGlyFrag": {
        "inputs": [
            {
                "name": "SmallGlyPep",
                "type": [],
                "purpose": ""
            },
            {
                "name": "breakPt",
                "type": [],
                "purpose": ""
            },
            {
                "name": "unitindex",
                "type": [],
                "purpose": ""
            }
        ],
        "outputs": [
            {
                "name": "Yion",
                "type": [],
                "purpose": ""
            },
            {
                "name": "Bion",
                "type": [],
                "purpose": ""
            },
            {
                "name": "Iion",
                "type": [],
                "purpose": ""
            },
            {
                "name": "Yunitind",
                "type": [],
                "purpose": ""
            },
            {
                "name": "Bunitind",
                "type": [],
                "purpose": ""
            },
            {
                "name": "Iunitind",
                "type": [],
                "purpose": ""
            }
        ],
        "purpose": " GLYCANFRAG: Break input glycan/glycopeptide at break points and return fragments\n \n  Syntax:\n     [NewGlyPep,Bion]=glycanFrag(SmallGlyPep,breakPt)\n \n  Input: SmallGlyPep and breakPt array, denoting sites of glycan fragmentation\n \n  Output: New glycopeptide that is reduced in size and cell array with Bions\n    Note: If the input is purely a glycan, then NewGlyPep will correspond to the y-ion\n    formed following either single or multiple fragmentation\n \n  Example 1: for glycomics analysis\n  >> SmallGlyPep='{n{n{h{h{h{h}}}{h{h{h}}{h{h}}}}}}';\n     breakPt=[5,26]\n     [Yion,Bion,Iion]=findGlyFrag(SmallGlyPep,breakPt)\n  Answer:\n        breakPt =    5    26\n        Yion ='{n{n}}'\n        Bion ='{h}'\n        Iion='{h{h{h{h}}}{h{h{h}}{h}}}'\n \n See also glyMZCALC, FragmentGly, UQFRAGION, JOINGLYPEP, COMPILEFRAGS,GLYCANFRAG, BREAKGLYPEP,\n MULTISGPFRAG.\n"
    },
    "glyMZCalc": {
        "inputs": [
            {
                "name": "varargin",
                "type": [],
                "purpose": ""
            }
        ],
        "outputs": [
            {
                "name": "glyMZ",
                "type": [],
                "purpose": ""
            },
            {
                "name": "comp",
                "type": [],
                "purpose": ""
            }
        ],
        "purpose": "  GLYMW: Returns m/z for glycan \n \n  Syntax:\n       glyMZ = glyMZCalc(glyStruct)\n \n    Input:\n      glyStruct: A structure describing the glycan\n \n    Output:\n      glyMZ: monoisotopic glycan M/Z (including charge state consideration)\n \n  Examples:\n    adduct.name='Na';\n    adduct.count=2;\n    glyStruct.name='{n{n{h{h{h{h}}}{h{h{h}}{h}}}}}';\n    glyStruct.z=2;\n    glyStruct.adduct=adduct;\n    glyStruct.ano='Me';\n    glyStruct.form='Me';\n    glyMZCalc(glyStruct)\n \n  Date Last updated : 01/08/17  by Sriram Neelamegham\n"
    }
}